import sys
import struct
import socket
#generates 16 48-bit subkeys from given 64-bit key
def gen_subkeys(key):
    subkeys = []
    bin_key = ""
    pc1_key = ""

    #pc1 permutation
    #a permutation here is essentially moving bits to a new spot. for example, pc1[0] = 57.
    #this means that the first element of the permutation array will be the 57th bit in the original key.
    #since pc1[1] = 49, the second element of the array will be the 49th bit in the original key.
    pc1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4]
    for i in range(0, 8):
        bin_key += "{0:08b}".format(ord(key[i])) #converts key into binary
    for i in range(0, len(pc1)):
        pc1_key += bin_key[pc1[i] - 1]
    c = pc1_key[0:28]
    d = pc1_key[28:56]
    subkeys += [c + d]

    #shift to gen other subkeys
    #other subkeys are generated by left-shifting the pc1 permutation parts either 1 or 2 times.
    #the permutation is split into left and right, and both are shifted independently
    #before being combined back together into a new subkey.
    num_shifts = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]
    for i in range(0, len(num_shifts)):
        c = c[num_shifts[i]:28] + c[0:num_shifts[i]]
        d = d[num_shifts[i]:28] + d[0:num_shifts[i]]
        subkeys += [c + d]

    #pc2 permutation
    #quite like pc1, but with different positions
    pc2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32]
    for i in range(0, len(subkeys)):
        temp = ""
        for j in range(0, len(pc2)):
            temp += subkeys[i][pc2[j] - 1]
        subkeys[i] = temp
    return subkeys

#performs permutations before encrypting message
def encrypt_msg(msg, subkeys, encrypt):
    bin_msg = ""
    ip_msg  = ""
    rl      = ""
    ip1_msg = ""

    for i in range(0, 8):
        bin_msg += "{0:08b}".format(ord(msg[i]))
    
    #ip permutation
    ip = [58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7]
    for i in range(0, len(ip)):
        ip_msg += bin_msg[ip[i] - 1]
    left  = ip_msg[0:32]
    right = ip_msg[32:64]
    sleft = left

    #encryption scheme works by using left-right, or the first and last half of the last time it was ran or the
    #permutation. the last half is imported to be the first half for the next round, while the last half of
    #the next round can be found via xor'ing the last half with f(right, subkeys[i]).
    if encrypt: #used to encrypt DES
        for i in range(1, len(subkeys)):
            left  = right
            right = "{0:032b}".format(int(sleft, 2) ^ int(f(right, subkeys[i]), 2))
            sleft = left
    else: #used to decrypt DES
        for i in range(len(subkeys) - 1,0,-1): #only diff. between encrypt/decrypt is the order of subkey traversal
            left  = right
            right = "{0:032b}".format(int(sleft, 2) ^ int(f(right, subkeys[i]), 2))
            sleft = left
    rl = right + left

    #ip^-1 permutation
    ip1 = [40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25]
    for i in range(0, len(ip1)):
        ip1_msg += rl[ip1[i] - 1]
    return int(ip1_msg, 2)

#helper function for DES encryption
def f(right, key):
    e_right = ""
    s_right = ""
    p_right = ""

    #e permutation
    e = [32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17, 16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1]
    for i in range(0, len(e)):
        e_right += right[e[i] - 1] 
    e_right = int(e_right, 2) ^ int(key, 2)
    e_right = "{0:0{1}b}".format(e_right, len(key))

    #sbox

    #e permutation transforms an array of 32 into 48. with that, there's 8 groups of 6 bits.
    #in sbox, 6 bits will be transformed into 4 bits via table access to a hard-coded sbox.
    #given 010110, the row is calculated by extracting the first and last digits, (0 and 0) to form 00 or 0.
    #the column is found in the middle 4 digits, or 1011, or 11. then you access s1 for group 1, s2
    #for group 2, and so on... so if 010110 was the first group of 6 bits, then answer would be s1[0][11].
    for i in range(0, 8):
        row      = int(e_right[6*i] + e_right[6*i+5], 2)
        column   = int(e_right[6*i+1:6*i+5], 2)
        s_right += "{0:04b}".format(get_sbox(i + 1, row, column))

    p = [16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10, 2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25]
    for i in range(0, len(p)):
        p_right += s_right[p[i] - 1]
    return p_right

#plugs in row/column into an sbox to get an answer
def get_sbox(box, row, column):
    s1 = [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7], [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8], [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0], [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]]
    s2 = [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10], [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5], [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15], [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]]
    s3 = [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8], [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1], [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7], [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]]
    s4 = [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15], [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9], [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4], [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]]
    s5 = [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9], [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6], [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14], [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]]
    s6 = [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11], [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8], [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6], [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]]
    s7 = [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1], [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6], [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2], [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]]
    s8 = [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7], [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2], [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8], [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]
    if box == 1:
        return s1[row][column]
    elif box == 2:
        return s2[row][column]
    elif box == 3:
        return s3[row][column]
    elif box == 4:
        return s4[row][column]
    elif box == 5:
        return s5[row][column]
    elif box == 6:
        return s6[row][column]
    elif box == 7:
        return s7[row][column]
    else:
        return s8[row][column]

#sends info over network
def send_info(hostname, port, content):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((hostname, port))
    s.sendall(content)
    s.shutdown(socket.SHUT_WR)
    s.close()

#msg = format(text, 'x')
#key = string
#encrypt = True/False
def des_api(msg, key, encrypt):
    subkeys = gen_subkeys("{0: <8}".format(key[0:8]))
    result = ""
    if encrypt:
        msg = [msg[i:i+8] for i in range(0, len(msg), 8)]
        msg[-1] = "{0: <8}".format(msg[-1]) #pads with zero
        for i in range(0, len(msg)):
            #cover the case where it's 00 < 10 (leading zeros)
            result += format(encrypt_msg(msg[i], subkeys, True), '016x') 
    else:
        msg = [msg[i:i+16] for i in range(0, len(msg), 16)]
        for i in range(0, len(msg)):
            msg[i] = struct.pack(">Q", int(msg[i], 16))
        for i in range(0, len(msg)):
            result += format((encrypt_msg(msg[i], subkeys, False)),'016x').decode("hex")
    return result

if __name__ == "__main__":
  
    if len(sys.argv) != 5 and len(sys.argv) != 4:
        print "usage: des.py <IP> <PORT> <FILE> <KEY> || des.py <STRING> <KEY> <encrypt/decrypt>"
        sys.exit(2)
    
    result = ""
    if len(sys.argv) == 4:
        key     = "{0: <8}".format(sys.argv[2][0:8])
        subkeys = gen_subkeys(key)
        if sys.argv[3] == "decrypt":
            msg = [sys.argv[1][i:i+16] for i in range(0, len(sys.argv[1]), 16)]
            for i in range(0, len(msg)):
                msg[i] = struct.pack(">Q", int(msg[i], 16))
            
            print 'Decrypted string for "%s":' % (sys.argv[1])
            for i in range(0, len(msg)):
                result += format((encrypt_msg(msg[i], subkeys, False)),'016x').decode("hex")
            print result
        else:
            msg     = [sys.argv[1][i:i+8] for i in range(0, len(sys.argv[1]), 8)]
            msg[-1] = "{0: <8}".format(msg[-1])
            print 'Encrypted string for "%s":' % (sys.argv[1])
            for i in range(0, len(msg)):
                result += format(encrypt_msg(msg[i], subkeys, True), '016x')
            print result
    else:
        msg = open(sys.argv[3]).read()
        msg = [msg[i:i+8] for i in range(0, len(msg), 8)]
        msg[-1] = "{0: <8}".format(msg[-1])
        key = "{0: <8}".format(sys.argv[4][0:8])
        subkeys = gen_subkeys(key)
        for i in range(0, len(msg)):
            result += struct.pack(">Q", encrypt_msg(msg[i], subkeys, True))
        send_info(sys.argv[1], int(sys.argv[2]), result) 
